{
  "timestamp": "2021-01-02T06:58:13",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.1.1",
    "typescriptVersion": "4.0.3"
  },
  "components": [
    {
      "filePath": "./src/components/sc-accordion/sc-accordion.tsx",
      "encapsulation": "shadow",
      "tag": "sc-accordion",
      "readme": "# sc-accordion\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "sc-accordion": "<div class=\"intro\">\nHead over to <a href=\"/components/sc-accordion-item\"><code>sc-accordion-item</code></a> for more details about properties, events and methods on that component.\n</div>\n\n### Single (default)\n\nBy default only one `<sc-accordion-item>` element inside a `<sc-accordion>` can be expanded at any given time. When clicked on a different `<sc-accordion-item>`, the active one will be collapsed and the clicked one will be expanded.\n\n```html\n<sc-accordion id=\"inner-accordion\">\n  <sc-accordion-item heading=\"I\" active>\n    Add <code>active</code> attribute to open an item by default.\n  </sc-accordion-item>\n  <sc-accordion-item heading=\"Am\">\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n  <sc-accordion-item heading=\"Groot\">\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n</sc-accordion>\n```\n\n### Multiple\n\nThere are times when you need multiple items to be open at the same time. Just add `multiple` attribute to the `<sc-accordion>` element.\n\n```html\n<sc-accordion multiple>\n  <sc-accordion-item heading=\"We\">\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n  <sc-accordion-item heading=\"Are\">\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n  <sc-accordion-item heading=\"Groot\">\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n</sc-accordion>\n```\n\n### Nested\n\nNested accordions are also possible, the components will figure out which `<sc-accordion>` component is the user interacting with. \n\n```html\n<sc-accordion>\n  <sc-accordion-item heading=\"Accordions can be nested too\">\n    Lorem ipsum dolor sit\n\n    <sc-accordion id=\"inner-accordion\">\n      <sc-accordion-item heading=\"Nested\">\n        Lorem ipsum dolor sit\n      </sc-accordion-item>\n\n      <sc-accordion-item heading=\"Accordions\">\n        Lorem ipsum dolor sit\n      </sc-accordion-item>\n      <sc-accordion-item heading=\"Are pretty cool\">\n        Lorem ipsum dolor sit\n      </sc-accordion-item>\n    </sc-accordion>\n\n  </sc-accordion-item>\n  <sc-accordion-item heading=\"Yayyy\"\">\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n</sc-accordion>\n```\n\n\n### Customise it\n\nThere are 2 slots you can use to customise each item. `slot=\"heading\"` and `slot=\"arrow\"`\n\n```html\n<sc-accordion>\n  <sc-accordion-item>\n    <div slot=\"heading\">\n      <mark>\n        Use <code>slot=\"heading\"</code> to customise heading\n      </mark>\n    </div>\n    Lorem ipsum dolor sit\n  </sc-accordion-item>\n  <sc-accordion-item heading=\"Customise arrow\">\n    <div slot=\"arrow\" style=\"text-align: center; color: red; width: 60px; height: 60px; font-size: 60px; line-height: 60px\">\n      &#10084;\n    </div>\n    Use <code>slot=\"arrow\"</code> to customise arrow\n  </sc-accordion-item>\n</sc-accordion>\n```\n"
      },
      "props": [
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If multiple `<sc-accordion-item>`s can open at the same time",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [
        {
          "event": "opened",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [
        {
          "name": "--sc-accordion-animation-duration",
          "annotation": "prop",
          "docs": "CSS animation duration value. e.g. 1s, 500ms - default: var(--sc-animation-duration, 0.2s)"
        },
        {
          "name": "--sc-accordion-animation-timing-function",
          "annotation": "prop",
          "docs": "CSS animation timing function. - default: var(--sc-animation-timing-function, ease-in-out)"
        },
        {
          "name": "--sc-accordion-item-body-bg-color",
          "annotation": "prop",
          "docs": "Content background colour - default: var(--sc-bg-color, #f1f1f1)"
        },
        {
          "name": "--sc-accordion-item-body-max-height",
          "annotation": "prop",
          "docs": "Inner content max height. This values is also used for CSS animation - default: 100vh"
        },
        {
          "name": "--sc-accordion-item-body-padding-x",
          "annotation": "prop",
          "docs": "Horizontal padding for inner content - default: calc(var(--sc-root-spacing, 8px) * 2)"
        },
        {
          "name": "--sc-accordion-item-body-padding-y",
          "annotation": "prop",
          "docs": "Vertical padding for inner content - default: calc(var(--sc-root-spacing, 8px) * 2)"
        },
        {
          "name": "--sc-accordion-item-heading-bg-color",
          "annotation": "prop",
          "docs": "Heading background colour - default: var(--sc-bg-color, #f1f1f1)"
        },
        {
          "name": "--sc-accordion-item-heading-border-bottom",
          "annotation": "prop",
          "docs": "Bottom border applied to the heading element to better separate the heading and body, especially useful when content is scrollable. - default: 1px solid var(--sc-shadow-color, rgba(0, 0, 0, 0.2))"
        },
        {
          "name": "--sc-accordion-item-heading-padding-x",
          "annotation": "prop",
          "docs": "Horizontal padding for item heading - default: calc(var(--sc-root-spacing, 8px) * 2)"
        },
        {
          "name": "--sc-accordion-item-heading-padding-y",
          "annotation": "prop",
          "docs": "Vertical padding for item heading - default: calc(var(--sc-root-spacing, 8px) * 2)"
        },
        {
          "name": "--sc-accordion-item-heading-text-color",
          "annotation": "prop",
          "docs": "Heading text colour - default: var(--sc-text-color, #333333)"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-accordion/sc-accordion-item/sc-accordion-item.tsx",
      "encapsulation": "shadow",
      "tag": "sc-accordion-item",
      "readme": "# sc-accordion-item\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": true,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "If the accordion item should be opened by default",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autoHeight",
          "type": "boolean",
          "mutable": false,
          "attr": "auto-height",
          "reflectToAttr": false,
          "docs": "If expanded height should be automatically calculated. If set, the `--sc-accordion-item-body-max-height` CSS variable will be set automatically to the content height",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text.\nThis will be overwritten by `heading` slot",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "headingTag",
          "type": "string",
          "mutable": false,
          "attr": "heading-tag",
          "reflectToAttr": false,
          "docs": "The HTML tag to be applied to the heading text.\nThis will be overwritten by `heading` slot",
          "docsTags": [],
          "default": "'h3'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the accordion item",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Opens the accordion item.",
          "docsTags": []
        },
        {
          "name": "toggle",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "toggle() => Promise<void>",
          "parameters": [],
          "docs": "Toggle open state of accordion item",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "closed",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item has closed",
          "docsTags": []
        },
        {
          "event": "closing",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item started closing",
          "docsTags": []
        },
        {
          "event": "opened",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item has opened",
          "docsTags": []
        },
        {
          "event": "opening",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when accordion item started opening",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-button/sc-button.tsx",
      "encapsulation": "none",
      "tag": "sc-button",
      "readme": "# sc-button\n\n",
      "docs": "",
      "docsTags": [
        {
          "text": "- Content is placed between the named slots if provided without a slot.",
          "name": "slot"
        }
      ],
      "usage": {
        "sc-button": "<div class=\"intro\">\nA button is the most identifiable component for neumorphism designs. You can customise the use of a button in various ways. \n</div>\n\n```html\n<sc-button aria-label=\"Default button\" onclick=\"alert('yo')\">Button</sc-button>\n```\n\nYou can use it the same way as an `<a>` tag.\n\n```html\n<!-- Anchor -->\n<sc-button aria-label=\"Anchor tag\" href=\"/\" target=\"_blank\" rel=\"noreferrer\" title=\"button\">\nAnchor\n</sc-button>\n```\n\nAdd a `block` attribute to create a block level button.\n\n```html\n<!-- Block level -->\n<sc-button aria-label=\"Block level button\" block>Block Button</sc-button>\n```\n\nUse `icon` attribute to adjust styles to fit an icon into the button.\n\n```html\n<sc-button aria-label=\"Icon button\" icon>\n  <i class='bx bx-drink'></i>\n</sc-button>\n```\n\nUse `icon-text` attribute to center align icon and text.\n\n```html\n<sc-button aria-label=\"Icon and text button\" icon-text>\n  <i class='bx bx-drink'></i>\n  Text\n</sc-button>\n\n<sc-button aria-label=\"Icon and text button\" icon-text>\n  Text\n  <i class='bx bx-drink'></i>\n</sc-button>\n```\nUse `bordered` attribute to add a reflective border\n\n```html\n<sc-button aria-label=\"Icon button with a reflective border\" bordered icon>\n  <i class='bx bx-drink'></i>\n</sc-button>\n```\n\nUse `circle` attribute to create a circle shaped button\n\n```html\n<sc-button aria-label=\"Circled button with image\" circle>\n  <img src=\"https://github.com/seanwuapps.png\" alt=\"avatar\" width=\"100%\">\n</sc-button>\n```\n\nUse `flat` attribute to make button blend in with the surface (not a11y friendly)\n\n```html\n<sc-button aria-label=\"Flat button\" flat>\n  Flat button\n</sc-button>\n```\n\n\nCombine attributes together to have a party\n\n```html\n\n<h6>Circle icon</h6>\n<sc-button aria-label=\"Circle icon\" icon circle>\n  <i class='bx bx-drink'></i>\n</sc-button>\n\n<h6>Circle bordered</h6>\n<sc-button aria-label=\"Circle bordered\" circle bordered>\n  <img src=\"https://github.com/seanwuapps.png\" alt=\"avatar\" width=\"100%\">\n</sc-button>\n```\n\n\n\n"
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "Set active state for the button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "block",
          "type": "boolean",
          "mutable": false,
          "attr": "block",
          "reflectToAttr": true,
          "docs": "Make button `display: block`",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "bordered",
          "type": "boolean",
          "mutable": false,
          "attr": "bordered",
          "reflectToAttr": true,
          "docs": "If prop exists, button will have an engraved-styled border",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "circle",
          "type": "boolean",
          "mutable": false,
          "attr": "circle",
          "reflectToAttr": false,
          "docs": "Make button circle shaped",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If `true`, the user cannot interact with the button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "download",
          "type": "string",
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "This attribute instructs browsers to download a URL instead of navigating to\nit, so the user will be prompted to save it as a local file. If the attribute\nhas a value, it is used as the pre-filled file name in the Save prompt\n(the user can still change the file name if they want).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "flat",
          "type": "boolean",
          "mutable": false,
          "attr": "flat",
          "reflectToAttr": false,
          "docs": "Make button flat",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Contains a URL or a URL fragment that the hyperlink points to.\nIf this property is set, an anchor tag will be rendered.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "boolean",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": true,
          "docs": "Icon only button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconText",
          "type": "boolean",
          "mutable": false,
          "attr": "icon-text",
          "reflectToAttr": false,
          "docs": "If this button has both icon and text",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.\nOnly applies when an `href` is provided.\nSpecial keywords: `\"_blank\"`, `\"_self\"`, `\"_parent\"`, `\"_top\"`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of the button.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "blurEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button loses focus.",
          "docsTags": []
        },
        {
          "event": "clickEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button is clicked.",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--sc-button-bg-color",
          "annotation": "prop",
          "docs": "Background of the button. - default: var(--sc-bg-color, #f6f6f8)"
        },
        {
          "name": "--sc-button-border-radius",
          "annotation": "prop",
          "docs": "Button border radius. - default: var(--sc-border-radius, 1em)"
        },
        {
          "name": "--sc-button-bordered-border-radius",
          "annotation": "prop",
          "docs": "Bordered-style border radius - default: var(--sc-button-border-radius)"
        },
        {
          "name": "--sc-button-bordered-border-width",
          "annotation": "prop",
          "docs": "Bordered-style border width - default: 2px"
        },
        {
          "name": "--sc-button-circle-size",
          "annotation": "prop",
          "docs": "Circle button size. - default: calc(var(--sc-root-spacing, 8px) * 6)"
        },
        {
          "name": "--sc-button-edge-width",
          "annotation": "prop",
          "docs": "Width of the edge - default: 4px"
        },
        {
          "name": "--sc-button-icon-size",
          "annotation": "prop",
          "docs": "Icon button size. - default: calc(var(--sc-root-spacing, 8px) * 6)"
        },
        {
          "name": "--sc-button-padding-x",
          "annotation": "prop",
          "docs": "Horizontal paddings. - default: calc(var(--sc-root-spacing, 8px) * 4)"
        },
        {
          "name": "--sc-button-padding-y",
          "annotation": "prop",
          "docs": "Vertical paddings. - default: calc(var(--sc-root-spacing, 8px) * 2)"
        },
        {
          "name": "--sc-button-text-active-color",
          "annotation": "prop",
          "docs": "Text color with active prop - default: var(--sc-active-color, #c586c0)"
        },
        {
          "name": "--sc-button-text-color",
          "annotation": "prop",
          "docs": "Button text color. - default: var(--sc-text-color, #333333)"
        },
        {
          "name": "--sc-button-text-hover-color",
          "annotation": "prop",
          "docs": "Text color on hover - default: var(--sc-secondary-color, #646695)"
        },
        {
          "name": "--sc-button-vertical-align",
          "annotation": "prop",
          "docs": "vertical align of the button - default: top"
        },
        {
          "name": "--sc-button-width",
          "annotation": "prop",
          "docs": "Set fixed width for button - default: auto"
        }
      ],
      "slots": [
        {
          "name": "",
          "docs": "Content is placed between the named slots if provided without a slot."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-card/sc-card.tsx",
      "encapsulation": "shadow",
      "tag": "sc-card",
      "readme": "# sc-card\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "sc-card": "<div class=\"intro\">\n  A card contains a set of relevant content on a single topic.\n</div>\n\n## Text based cards\n\nCard's content can be added into the card via the default slot. `card-title` and `card-subtitle` properties are available to add styled card heading.\n\nAdd `engraved` to make the card appear to be sunk into the surface.\n\nAdd `bordered` to give the card a border that's reflective to the light source.\n\n```html\n<sc-card class=\"ma-4\" card-title=\"Card\" card-subtitle=\"I'm normal card\">\n  Lorem ipsum dolor, sit amet consectetur adipisicing elit. Atque natus autem veritatis architecto facilis\n</sc-card>\n<sc-card class=\"ma-4\" engraved card-title=\"Card\" card-subtitle=\"I'm engraved card\">\n  Lorem ipsum dolor sit amet consectetur adipisicing elit. Beatae quas dolorem voluptatibus facilis\n</sc-card>\n<sc-card class=\"ma-4\" bordered card-title=\"Card\" card-subtitle=\"I'm bordered card\">\n  Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatum beatae velit maiores illum\n</sc-card>\n```\n\n<h2>Media cards</h2>\n\n`slot=\"media-content\"` can be used inside the card element to show featured media.\n\n```html\n<sc-card class=\"ma-4\" card-title=\"Top media\" card-subtitle=\"5 Feb 2020\" media-position=\"top\">\n  <img slot=\"media-content\" src=\"https://res.cloudinary.com/seanwuapps/image/upload/c_scale,w_800/v1603083086/coffee_ud1ucg.jpg\" alt=\"photo\">\n  <div>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Perferendis rerum veniam natus sapiente porro\n  </div>\n</sc-card>\n<sc-card class=\"ma-4\" card-title=\"Bottom media\" card-subtitle=\"5 Feb 2020\" media-position=\"bottom\">\n  <img slot=\"media-content\" src=\"https://res.cloudinary.com/seanwuapps/image/upload/c_scale,w_800/v1603083086/coffee_ud1ucg.jpg\" alt=\"photo\">\n  <div>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Perferendis rerum veniam natus sapiente porro\n  </div>\n</sc-card>\n<sc-card class=\"ma-4\" card-title=\"Left media\" card-subtitle=\"5 Feb 2020\" media-position=\"left\">\n  <img slot=\"media-content\" src=\"https://res.cloudinary.com/seanwuapps/image/upload/c_scale,w_800/v1603083086/coffee_ud1ucg.jpg\" alt=\"photo\">\n  <div>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Perferendis rerum veniam natus sapiente porro\n  </div>\n</sc-card>\n<sc-card class=\"ma-4\" card-title=\"Right media\" card-subtitle=\"5 Feb 2020\" media-position=\"right\">\n  <img slot=\"media-content\" src=\"https://res.cloudinary.com/seanwuapps/image/upload/c_scale,w_800/v1603083086/coffee_ud1ucg.jpg\" alt=\"photo\">\n  <div>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Perferendis rerum veniam natus sapiente porro\n  </div>\n</sc-card>\n```\n\n\n## Customise card title\n\nCard heading section can be customised with the `custom-title` slot. \n\n```html\n<sc-card class=\"ma-4\">\n  <div slot=\"custom-title\">\n    <div>\n      <mark>Customise title with <code>slot=\"custom-title\"</code></mark>\n    </div>\n    <div>\n      <marquee>Go bananas inside the slot <img\n          src=\"https://ph-files.imgix.net/caf5608a-67ec-4f9f-acb5-db0052c33bed?auto=format&auto=compress&codec=mozjpeg&cs=strip&w=80&h=80\"\n          alt=\"party parrot\" width=\"20\"></marquee>\n    </div>\n  </div>\n  Lorem ipsum, dolor sit amet consectetur adipisicing elit. Repellat, modi animi possimus fugiat accusamus vitae tempore suscipit asperiores eum cum nihil amet natus impedit iure\n</sc-card>\n```"
      },
      "props": [
        {
          "name": "bordered",
          "type": "boolean",
          "mutable": false,
          "attr": "bordered",
          "reflectToAttr": true,
          "docs": "If this card has bordered style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cardSubtitle",
          "type": "string",
          "mutable": false,
          "attr": "card-subtitle",
          "reflectToAttr": false,
          "docs": "Subtitle of the card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "cardTitle",
          "type": "string",
          "mutable": false,
          "attr": "card-title",
          "reflectToAttr": false,
          "docs": "Title of the card",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "engraved",
          "type": "boolean",
          "mutable": false,
          "attr": "engraved",
          "reflectToAttr": false,
          "docs": "if true, card will appear engraved instead of raised by default.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "mediaPosition",
          "type": "\"bottom\" | \"end\" | \"left\" | \"right\" | \"start\" | \"top\"",
          "mutable": false,
          "attr": "media-position",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--sc-card-bg-color",
          "annotation": "prop",
          "docs": "Background color of card."
        },
        {
          "name": "--sc-card-border-width",
          "annotation": "prop",
          "docs": "Border width for `bordered` card - default: 2px"
        },
        {
          "name": "--sc-card-bordered-width",
          "annotation": "prop",
          "docs": "Card border width (only applicable for bordered cards)"
        },
        {
          "name": "--sc-card-inner-padding-y",
          "annotation": "prop",
          "docs": "Padding between title section and content section"
        },
        {
          "name": "--sc-card-media-height",
          "annotation": "prop",
          "docs": "height of media part of the card"
        },
        {
          "name": "--sc-card-media-object-position",
          "annotation": "prop",
          "docs": "[object-position rule](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) for the media. default: center"
        },
        {
          "name": "--sc-card-media-width",
          "annotation": "prop",
          "docs": "width of media part of the card"
        },
        {
          "name": "--sc-card-outer-padding-x",
          "annotation": "prop",
          "docs": "Default: calc(var(--sc-root-spacing) * 4);"
        },
        {
          "name": "--sc-card-outer-padding-y",
          "annotation": "prop",
          "docs": "Default: calc(var(--sc-root-spacing) * 4);"
        },
        {
          "name": "--sc-card-subtitle-font-size",
          "annotation": "prop",
          "docs": "Subtitle font size"
        },
        {
          "name": "--sc-card-subtitle-font-weight",
          "annotation": "prop",
          "docs": "Subtitle font weight"
        },
        {
          "name": "--sc-card-subtitle-text-color",
          "annotation": "prop",
          "docs": "Subtitle text color"
        },
        {
          "name": "--sc-card-title-font-size",
          "annotation": "prop",
          "docs": "Title text font size."
        },
        {
          "name": "--sc-card-title-font-weight",
          "annotation": "prop",
          "docs": "Title font weight"
        },
        {
          "name": "--sc-card-title-text-color",
          "annotation": "prop",
          "docs": "Title text color"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-color/sc-color.tsx",
      "encapsulation": "none",
      "tag": "sc-color",
      "readme": "# sc-color\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for input",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-input/sc-input.tsx",
      "encapsulation": "none",
      "tag": "sc-input",
      "readme": "# sc-input\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "sc-input": "<div class=\"intro\">\nGeneric input component.\n</div>\n\n### *Note* \nIn order to use the `sc-input` element in your normal `form` element for correct form values and validations, this component does not use shadow dom, meaning the styles can be affected by the global css stylesheets.\n\n### Utilises the browser's built-in validations\nThis component passes the `type` attribute to the native `<input>` element used under the hood. So you can use types such as `email`, `number`, `tel`, `url` `password` for their supported browser validation behaviours.\n\n\n### Alternative components for certain types\n\nThere are input types that has dedicated components for them. Here's a list of input types and the component we recommend you use. \n\n- Buttons: `sc-button`\n- Color: `sc-color`\n- File: coming soon \n- Range: coming soon\n\n\n```html\n<form method=\"get\" action=\"/\">\n  <sc-input class=\"mb-2\" block label=\"Email\" type=\"email\" required name=\"email\" id=\"email\"></sc-input>\n\n  <sc-input class=\"mb-2\" block label=\"Password\" type=\"password\" required name=\"password\" maxlength=\"6\" id=\"password\">\n  </sc-input>\n\n  <sc-button block type=\"submit\" style=\"--sc-button-bg-color: #333; --sc-button-text-color: #fff;\">\n    Submit\n  </sc-button>\n</form>\n```\n\nYou can set `engraved` level for individual inputs\n\n```html\n<sc-input engraved=\"1\" label=\"Input\" type=\"text\" name=\"text\"></sc-input>\n<sc-input engraved=\"2\" label=\"Input\" type=\"text\" name=\"text\"></sc-input>\n<sc-input engraved=\"3\" label=\"Input\" type=\"text\" name=\"text\"></sc-input>\n```\n\n\nAdd the `block` attribute to make it take the full width\n```html\n<sc-input block label=\"Input\" type=\"text\" name=\"text\"></sc-input>\n```\n\n\n<div class=\"mb-5\">\n  checkbox\n  <sc-input type=\"checkbox\">\n  </sc-input>\n  <input type=\"checkbox\">\n  </input>\n</div>\n<div class=\"mb-5\">\n  color\n  <sc-input type=\"color\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  date\n  <sc-input type=\"date\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  datetime\n  <sc-input type=\"datetime-local\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  email\n  <sc-input type=\"email\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  file\n  <sc-input type=\"file\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  month\n  <sc-input type=\"month\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  number\n  <sc-input type=\"number\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  password\n  <sc-input type=\"password\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  radio\n  <sc-input type=\"radio\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  range\n  <sc-input type=\"range\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  reset\n  <sc-input type=\"reset\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  search\n  <sc-input type=\"search\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  submit\n  <sc-input type=\"submit\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  tel\n  <sc-input type=\"tel\">\n  </sc-input>\n</div>\n<div class=\"mb-5\">\n  text\n  <sc-input type=\"text\">\n  </sc-input>\n</div>\n<sc-input type=\"time\">\n</sc-input>\n<sc-input type=\"url\">\n</sc-input>\n<sc-input type=\"week\">\n</sc-input>"
      },
      "props": [
        {
          "name": "accept",
          "type": "string",
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `\"file\"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "ariaLabelledby",
          "type": "string",
          "mutable": false,
          "attr": "aria-labelledby",
          "reflectToAttr": true,
          "docs": "Aria labelby",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autocapitalize",
          "type": "string",
          "mutable": false,
          "attr": "autocapitalize",
          "reflectToAttr": false,
          "docs": "Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autocorrect",
          "type": "\"off\" | \"on\"",
          "mutable": false,
          "attr": "autocorrect",
          "reflectToAttr": false,
          "docs": "Whether auto correction should be enabled when the user is entering/editing the text value.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "block",
          "type": "boolean",
          "mutable": false,
          "attr": "block",
          "reflectToAttr": false,
          "docs": "Takes the entire width of the row",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "engraved",
          "type": "number",
          "mutable": false,
          "attr": "engraved",
          "reflectToAttr": false,
          "docs": "Engrave level (0-9) note if 0 there will be no visible border around the element, so you'll need to add border via css.",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.",
          "docsTags": [],
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "The maximum value, which must not be less than its minimum (min attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "The minimum value, which must not be greater than its maximum (max attribute) value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `\"email\"` or `\"file\"`, otherwise it is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, or `\"password\"`, otherwise it is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Instructional text that shows before the input has a value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If `true`, the user must fill in a value before submitting a form.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The initial size of the control. This value is in pixels unless the value of the type attribute is `\"text\"` or `\"password\"`, in which case it is an integer number of characters. This attribute applies only when the `type` attribute is set to `\"text\"`, `\"search\"`, `\"tel\"`, `\"url\"`, `\"email\"`, or `\"password\"`, otherwise it is ignored.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "step",
          "type": "string",
          "mutable": false,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "Works with the min and max attributes to limit the increments at which a value can be set.\nPossible values are: `\"any\"` or a positive floating point number.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of control to display. The default type is text.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the specified `sc-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "blurEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "inputEvent",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "keyDownEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a key is pressed down",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--sc-input-border-radius",
          "annotation": "prop",
          "docs": "Border radius for input box - default: var(--sc-border-radius, 1em)"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-progress/sc-progress.tsx",
      "encapsulation": "shadow",
      "tag": "sc-progress",
      "readme": "# sc-progress\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "sc-progress": "<div class=\"intro\">\nNeumorphic style progress indicator. Supports both linear (bar) and circular (ring) styles, with various options for size, color and label \n</div>\n\n\n### Linear progress bar\nThe progress is set by the `percentage` attribute, make sure it's a number between 0 to 100.\nYou can add label on to the progress bar by setting the `label` attribute. \n`--sc-progress-color` and `--sc-progress-label-color` custom CSS properties are available for customising the colors.\n```html\n<sc-progress percentage=\"20\" label=\"20%\"></sc-progress>\n<sc-progress percentage=\"40\" label=\"40%\" style=\"--sc-progress-height: 4px\"></sc-progress>\n<sc-progress percentage=\"60\" label=\"60%\" style=\"--sc-progress-color: blue; --sc-progress-label-color: white\"></sc-progress>\n```\n\n### Circular progress ring\nSimply add `circular` attribute to turn a progress bar to a progress ring. \nYou can also adjust the `size` attribute to fit your needs. \nHere are some examples\n\n```html\n<sc-progress percentage=\"0\" circular label=\"0_0\" size=\"100\"></sc-progress>\n<sc-progress percentage=\"40\" circular size=\"50\"></sc-progress>\n<sc-progress percentage=\"60\" label=\"60%\" circular size=\"100\" style=\"--sc-progress-color: red\"></sc-progress>\n<sc-progress percentage=\"90\" label=\"90%\" circular size=\"140\" style=\"--sc-progress-color: lime\"></sc-progress>\n<sc-progress percentage=\"100\" label=\"Done\" circular size=\"180\" style=\"--sc-progress-color: #3399aa\"></sc-progress>\n```\n\n### Indeterminate state\n\nAdd `indeterminate` attribute when you don't know how much progress is made. Perfect for loading animation.\n\n```html\n<sc-progress indeterminate></sc-progress>\n<sc-progress indeterminate style=\"--sc-progress-height: 4px\"></sc-progress>\n<sc-progress indeterminate circular></sc-progress>\n<sc-progress indeterminate circular label=\"Loading\" size=\"200\" ></sc-progress>\n```\n"
      },
      "props": [
        {
          "name": "circular",
          "type": "boolean",
          "mutable": false,
          "attr": "circular",
          "reflectToAttr": false,
          "docs": "Set shape of the progress indicator to be circular",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Use indeterminate mode for the progress bar when you do not know how long an operation will take.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label to be displayed inside the progress",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "percentage",
          "type": "number",
          "mutable": false,
          "attr": "percentage",
          "reflectToAttr": false,
          "docs": "Percentage of progress bar",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "number",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size for circular progress in pixels",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [
        {
          "name": "--sc-progress-animation-duration",
          "annotation": "prop",
          "docs": "Animation duration of the indeterminate progress bar - default: var(--sc-animation-duration, 0.4s)"
        },
        {
          "name": "--sc-progress-animation-timing-function",
          "annotation": "prop",
          "docs": "Animation timing function of the indeterminate progress bar - default: var(--sc-animation-timing-function, ease)"
        },
        {
          "name": "--sc-progress-border-radius",
          "annotation": "prop",
          "docs": "Radius of the progress bar - default: var(--sc-border-radius, 8px)"
        },
        {
          "name": "--sc-progress-circular-initial-rotate",
          "annotation": "prop",
          "docs": "Initial rotation of the progress ring. 0 means starting from right-center - default: 90deg"
        },
        {
          "name": "--sc-progress-circular-size",
          "annotation": "prop",
          "docs": "Width and height of the circular progress bar - default: 100px"
        },
        {
          "name": "--sc-progress-color",
          "annotation": "prop",
          "docs": "Color of the inner progress bar - default: var(--sc-active-color, #3ab877)"
        },
        {
          "name": "--sc-progress-height",
          "annotation": "prop",
          "docs": "Height of the progress bar - default: var(--sc-root-spacing, 8px)"
        },
        {
          "name": "--sc-progress-label-color",
          "annotation": "prop",
          "docs": "Color of the progress label - default: currentColor"
        },
        {
          "name": "--sc-progress-padding-x",
          "annotation": "prop",
          "docs": "Horizontal inner padding - default: 4px"
        },
        {
          "name": "--sc-progress-padding-y",
          "annotation": "prop",
          "docs": "Vertical inner padding - default: 4px"
        },
        {
          "name": "--sc-progress-width",
          "annotation": "prop",
          "docs": "Width of the progress bar - default: 100%"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/sc-toggle/sc-toggle.tsx",
      "encapsulation": "none",
      "tag": "sc-toggle",
      "readme": "# sc-toggle\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {
        "sc-toggle": "<div class=\"intro\">\nA toggle element is a good way to capture boolean values from user input. The usage follows the traditional input checkbox form element. Adding a <code>size=\"sm\"</code> attribute will give you a compact version of the element.\n</div>\n\nUse it like a checkbox\n```html\n<sc-toggle label=\"Toggle\" name=\"test1\" value=\"1\"></sc-toggle>\n```\n\nAdd `checked` attribute to set predefined state\n```html\n<sc-toggle label=\"Toggle\" name=\"test2\" value=\"2\" checked=\"checked\"></sc-toggle>\n```\n\nAdd a `size=\"sm\"` attribute to make it more compact\n```html\n<sc-toggle label=\"Toggle small\" name=\"test3\" value=\"3\" size=\"sm\"></sc-toggle>\n```"
      },
      "props": [
        {
          "name": "ariaLabelledby",
          "type": "string",
          "mutable": false,
          "attr": "aria-labelledby",
          "reflectToAttr": true,
          "docs": "aria labelby",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "This Boolean attribute lets you specify that a form control should have input focus when the page loads.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": true,
          "docs": "If this toggle is on by default",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label text to be displayed inline with the toggle",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"sm\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of toggle",
          "docsTags": [],
          "default": "'lg'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "blurEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "changeEvent",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "focusEvent",
          "detail": "void",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "inputEvent",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        },
        {
          "event": "keyDownEvent",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a key is pressed down",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [
        {
          "name": "--sc-toggle-active-bg-color",
          "annotation": "prop",
          "docs": "Background color of the toggle when active/checked - default: var(--sc-active-color, #c586c0)"
        },
        {
          "name": "--sc-toggle-active-btn-color",
          "annotation": "prop",
          "docs": "Toggle button color when active/checked - default: #fff"
        },
        {
          "name": "--sc-toggle-bg-color",
          "annotation": "prop",
          "docs": "Default background color in the toggle slide area - default: var(--sc-bg-color, #eee)"
        },
        {
          "name": "--sc-toggle-button-color",
          "annotation": "prop",
          "docs": "Toggle button color - default: #fff"
        },
        {
          "name": "--sc-toggle-button-size",
          "annotation": "prop",
          "docs": "Size of the toggle button. Note, if elements has `size=\"sm\"` attribute, the size will be half of this value. - default: calc(var(--sc-border-radius, 1em) * 2 + 1em)"
        }
      ],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ]
}