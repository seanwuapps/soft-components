/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface ScButton {
    /**
    * The button shape.
    */
    'block'?: boolean | undefined;
    /**
    * If `true`, the user cannot interact with the button.
    */
    'disabled': boolean;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download': string | undefined;
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href': string | undefined;
    /**
    * Icon only button
    */
    'icon'?: boolean | undefined;
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel': string | undefined;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
    /**
    * The type of the button.
    */
    'type': "submit" | "reset" | "button";
  }
  interface ScCard {}
  interface ScInput {}
}

declare global {


  interface HTMLScButtonElement extends Components.ScButton, HTMLStencilElement {}
  var HTMLScButtonElement: {
    prototype: HTMLScButtonElement;
    new (): HTMLScButtonElement;
  };

  interface HTMLScCardElement extends Components.ScCard, HTMLStencilElement {}
  var HTMLScCardElement: {
    prototype: HTMLScCardElement;
    new (): HTMLScCardElement;
  };

  interface HTMLScInputElement extends Components.ScInput, HTMLStencilElement {}
  var HTMLScInputElement: {
    prototype: HTMLScInputElement;
    new (): HTMLScInputElement;
  };
  interface HTMLElementTagNameMap {
    'sc-button': HTMLScButtonElement;
    'sc-card': HTMLScCardElement;
    'sc-input': HTMLScInputElement;
  }
}

declare namespace LocalJSX {
  interface ScButton {
    /**
    * The button shape.
    */
    'block'?: boolean | undefined;
    /**
    * If `true`, the user cannot interact with the button.
    */
    'disabled'?: boolean;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download'?: string | undefined;
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href'?: string | undefined;
    /**
    * Icon only button
    */
    'icon'?: boolean | undefined;
    /**
    * Emitted when the button loses focus.
    */
    'onBlurEvent'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the button is clicked.
    */
    'onClickEvent'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the button has focus.
    */
    'onFocusEvent'?: (event: CustomEvent<void>) => void;
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel'?: string | undefined;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
    /**
    * The type of the button.
    */
    'type'?: "submit" | "reset" | "button";
  }
  interface ScCard {}
  interface ScInput {}

  interface IntrinsicElements {
    'sc-button': ScButton;
    'sc-card': ScCard;
    'sc-input': ScInput;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'sc-button': LocalJSX.ScButton & JSXBase.HTMLAttributes<HTMLScButtonElement>;
      'sc-card': LocalJSX.ScCard & JSXBase.HTMLAttributes<HTMLScCardElement>;
      'sc-input': LocalJSX.ScInput & JSXBase.HTMLAttributes<HTMLScInputElement>;
    }
  }
}


